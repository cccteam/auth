// Code generated by MockGen. DO NOT EDIT.
// Source: ../postgresql/postgresql_iface.go
//
// Generated by this command:
//
//	mockgen -source ../postgresql/postgresql_iface.go -destination mock_postgres/mock_postgres.go
//

// Package mock_postgresql is a generated GoMock package.
package mock_postgresql

import (
	context "context"
	reflect "reflect"

	ccc "github.com/cccteam/ccc"
	postgresql "github.com/cccteam/session/postgresql"
	pgx "github.com/jackc/pgx/v5"
	pgconn "github.com/jackc/pgx/v5/pgconn"
	gomock "go.uber.org/mock/gomock"
)

// MockQueryer is a mock of Queryer interface.
type MockQueryer struct {
	ctrl     *gomock.Controller
	recorder *MockQueryerMockRecorder
}

// MockQueryerMockRecorder is the mock recorder for MockQueryer.
type MockQueryerMockRecorder struct {
	mock *MockQueryer
}

// NewMockQueryer creates a new mock instance.
func NewMockQueryer(ctrl *gomock.Controller) *MockQueryer {
	mock := &MockQueryer{ctrl: ctrl}
	mock.recorder = &MockQueryerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryer) EXPECT() *MockQueryerMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockQueryer) Begin(ctx context.Context) (pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", ctx)
	ret0, _ := ret[0].(pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockQueryerMockRecorder) Begin(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockQueryer)(nil).Begin), ctx)
}

// Exec mocks base method.
func (m *MockQueryer) Exec(ctx context.Context, query string, args ...any) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockQueryerMockRecorder) Exec(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockQueryer)(nil).Exec), varargs...)
}

// Query mocks base method.
func (m *MockQueryer) Query(ctx context.Context, query string, args ...any) (pgx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(pgx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockQueryerMockRecorder) Query(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockQueryer)(nil).Query), varargs...)
}

// QueryRow mocks base method.
func (m *MockQueryer) QueryRow(ctx context.Context, query string, args ...any) pgx.Row {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(pgx.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockQueryerMockRecorder) QueryRow(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockQueryer)(nil).QueryRow), varargs...)
}

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// DestroySession mocks base method.
func (m *MockDB) DestroySession(ctx context.Context, sessionID ccc.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroySession", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroySession indicates an expected call of DestroySession.
func (mr *MockDBMockRecorder) DestroySession(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroySession", reflect.TypeOf((*MockDB)(nil).DestroySession), ctx, sessionID)
}

// DestroySessionOIDC mocks base method.
func (m *MockDB) DestroySessionOIDC(ctx context.Context, oidcSID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroySessionOIDC", ctx, oidcSID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroySessionOIDC indicates an expected call of DestroySessionOIDC.
func (mr *MockDBMockRecorder) DestroySessionOIDC(ctx, oidcSID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroySessionOIDC", reflect.TypeOf((*MockDB)(nil).DestroySessionOIDC), ctx, oidcSID)
}

// InsertSession mocks base method.
func (m *MockDB) InsertSession(ctx context.Context, sessionInfo *postgresql.InsertSession) (ccc.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSession", ctx, sessionInfo)
	ret0, _ := ret[0].(ccc.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertSession indicates an expected call of InsertSession.
func (mr *MockDBMockRecorder) InsertSession(ctx, sessionInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSession", reflect.TypeOf((*MockDB)(nil).InsertSession), ctx, sessionInfo)
}

// Session mocks base method.
func (m *MockDB) Session(ctx context.Context, sessionID ccc.UUID) (*postgresql.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session", ctx, sessionID)
	ret0, _ := ret[0].(*postgresql.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Session indicates an expected call of Session.
func (mr *MockDBMockRecorder) Session(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockDB)(nil).Session), ctx, sessionID)
}

// UpdateSessionActivity mocks base method.
func (m *MockDB) UpdateSessionActivity(ctx context.Context, sessionID ccc.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSessionActivity", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSessionActivity indicates an expected call of UpdateSessionActivity.
func (mr *MockDBMockRecorder) UpdateSessionActivity(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSessionActivity", reflect.TypeOf((*MockDB)(nil).UpdateSessionActivity), ctx, sessionID)
}
