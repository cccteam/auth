// Code generated by MockGen. DO NOT EDIT.
// Source: ../session_iface.go
//
// Generated by this command:
//
//	mockgen -source ../session_iface.go -destination mock_session/mock_session_iface.go
//

// Package mock_session is a generated GoMock package.
package mock_session

import (
	context "context"
	reflect "reflect"

	access "github.com/cccteam/access"
	ccc "github.com/cccteam/ccc"
	sessiontypes "github.com/cccteam/session/sessiontypes"
	gomock "go.uber.org/mock/gomock"
)

// MockAccessor is a mock of Accessor interface.
type MockAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockAccessorMockRecorder
}

// MockAccessorMockRecorder is the mock recorder for MockAccessor.
type MockAccessorMockRecorder struct {
	mock *MockAccessor
}

// NewMockAccessor creates a new mock instance.
func NewMockAccessor(ctrl *gomock.Controller) *MockAccessor {
	mock := &MockAccessor{ctrl: ctrl}
	mock.recorder = &MockAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessor) EXPECT() *MockAccessorMockRecorder {
	return m.recorder
}

// AddUserRoles mocks base method.
func (m *MockAccessor) AddUserRoles(ctx context.Context, user access.User, roles []access.Role, domain access.Domain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserRoles", ctx, user, roles, domain)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserRoles indicates an expected call of AddUserRoles.
func (mr *MockAccessorMockRecorder) AddUserRoles(ctx, user, roles, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserRoles", reflect.TypeOf((*MockAccessor)(nil).AddUserRoles), ctx, user, roles, domain)
}

// DeleteUserRole mocks base method.
func (m *MockAccessor) DeleteUserRole(ctx context.Context, user access.User, role access.Role, domain access.Domain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserRole", ctx, user, role, domain)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserRole indicates an expected call of DeleteUserRole.
func (mr *MockAccessorMockRecorder) DeleteUserRole(ctx, user, role, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserRole", reflect.TypeOf((*MockAccessor)(nil).DeleteUserRole), ctx, user, role, domain)
}

// Domains mocks base method.
func (m *MockAccessor) Domains(ctx context.Context) ([]access.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Domains", ctx)
	ret0, _ := ret[0].([]access.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Domains indicates an expected call of Domains.
func (mr *MockAccessorMockRecorder) Domains(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Domains", reflect.TypeOf((*MockAccessor)(nil).Domains), ctx)
}

// RoleExists mocks base method.
func (m *MockAccessor) RoleExists(ctx context.Context, role access.Role, domain access.Domain) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleExists", ctx, role, domain)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RoleExists indicates an expected call of RoleExists.
func (mr *MockAccessorMockRecorder) RoleExists(ctx, role, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleExists", reflect.TypeOf((*MockAccessor)(nil).RoleExists), ctx, role, domain)
}

// UserPermissions mocks base method.
func (m *MockAccessor) UserPermissions(ctx context.Context, username access.User, domain ...access.Domain) (map[access.Domain][]access.Permission, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, username}
	for _, a := range domain {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserPermissions", varargs...)
	ret0, _ := ret[0].(map[access.Domain][]access.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserPermissions indicates an expected call of UserPermissions.
func (mr *MockAccessorMockRecorder) UserPermissions(ctx, username any, domain ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, username}, domain...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserPermissions", reflect.TypeOf((*MockAccessor)(nil).UserPermissions), varargs...)
}

// UserRoles mocks base method.
func (m *MockAccessor) UserRoles(ctx context.Context, username access.User, domain ...access.Domain) (map[access.Domain][]access.Role, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, username}
	for _, a := range domain {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserRoles", varargs...)
	ret0, _ := ret[0].(map[access.Domain][]access.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserRoles indicates an expected call of UserRoles.
func (mr *MockAccessorMockRecorder) UserRoles(ctx, username any, domain ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, username}, domain...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRoles", reflect.TypeOf((*MockAccessor)(nil).UserRoles), varargs...)
}

// MockStorageManager is a mock of StorageManager interface.
type MockStorageManager struct {
	ctrl     *gomock.Controller
	recorder *MockStorageManagerMockRecorder
}

// MockStorageManagerMockRecorder is the mock recorder for MockStorageManager.
type MockStorageManagerMockRecorder struct {
	mock *MockStorageManager
}

// NewMockStorageManager creates a new mock instance.
func NewMockStorageManager(ctrl *gomock.Controller) *MockStorageManager {
	mock := &MockStorageManager{ctrl: ctrl}
	mock.recorder = &MockStorageManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageManager) EXPECT() *MockStorageManagerMockRecorder {
	return m.recorder
}

// DestroySession mocks base method.
func (m *MockStorageManager) DestroySession(ctx context.Context, sessionID ccc.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroySession", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroySession indicates an expected call of DestroySession.
func (mr *MockStorageManagerMockRecorder) DestroySession(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroySession", reflect.TypeOf((*MockStorageManager)(nil).DestroySession), ctx, sessionID)
}

// Session mocks base method.
func (m *MockStorageManager) Session(ctx context.Context, sessionID ccc.UUID) (*sessiontypes.SessionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session", ctx, sessionID)
	ret0, _ := ret[0].(*sessiontypes.SessionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Session indicates an expected call of Session.
func (mr *MockStorageManagerMockRecorder) Session(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockStorageManager)(nil).Session), ctx, sessionID)
}

// UpdateSessionActivity mocks base method.
func (m *MockStorageManager) UpdateSessionActivity(ctx context.Context, sessionID ccc.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSessionActivity", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSessionActivity indicates an expected call of UpdateSessionActivity.
func (mr *MockStorageManagerMockRecorder) UpdateSessionActivity(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSessionActivity", reflect.TypeOf((*MockStorageManager)(nil).UpdateSessionActivity), ctx, sessionID)
}

// MockOIDCAzureSessionStorage is a mock of OIDCAzureSessionStorage interface.
type MockOIDCAzureSessionStorage struct {
	ctrl     *gomock.Controller
	recorder *MockOIDCAzureSessionStorageMockRecorder
}

// MockOIDCAzureSessionStorageMockRecorder is the mock recorder for MockOIDCAzureSessionStorage.
type MockOIDCAzureSessionStorageMockRecorder struct {
	mock *MockOIDCAzureSessionStorage
}

// NewMockOIDCAzureSessionStorage creates a new mock instance.
func NewMockOIDCAzureSessionStorage(ctrl *gomock.Controller) *MockOIDCAzureSessionStorage {
	mock := &MockOIDCAzureSessionStorage{ctrl: ctrl}
	mock.recorder = &MockOIDCAzureSessionStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOIDCAzureSessionStorage) EXPECT() *MockOIDCAzureSessionStorageMockRecorder {
	return m.recorder
}

// DestroySession mocks base method.
func (m *MockOIDCAzureSessionStorage) DestroySession(ctx context.Context, sessionID ccc.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroySession", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroySession indicates an expected call of DestroySession.
func (mr *MockOIDCAzureSessionStorageMockRecorder) DestroySession(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroySession", reflect.TypeOf((*MockOIDCAzureSessionStorage)(nil).DestroySession), ctx, sessionID)
}

// DestroySessionOIDC mocks base method.
func (m *MockOIDCAzureSessionStorage) DestroySessionOIDC(ctx context.Context, oidcSID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroySessionOIDC", ctx, oidcSID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroySessionOIDC indicates an expected call of DestroySessionOIDC.
func (mr *MockOIDCAzureSessionStorageMockRecorder) DestroySessionOIDC(ctx, oidcSID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroySessionOIDC", reflect.TypeOf((*MockOIDCAzureSessionStorage)(nil).DestroySessionOIDC), ctx, oidcSID)
}

// NewSession mocks base method.
func (m *MockOIDCAzureSessionStorage) NewSession(ctx context.Context, username, oidcSID string) (ccc.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSession", ctx, username, oidcSID)
	ret0, _ := ret[0].(ccc.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSession indicates an expected call of NewSession.
func (mr *MockOIDCAzureSessionStorageMockRecorder) NewSession(ctx, username, oidcSID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSession", reflect.TypeOf((*MockOIDCAzureSessionStorage)(nil).NewSession), ctx, username, oidcSID)
}

// Session mocks base method.
func (m *MockOIDCAzureSessionStorage) Session(ctx context.Context, sessionID ccc.UUID) (*sessiontypes.SessionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session", ctx, sessionID)
	ret0, _ := ret[0].(*sessiontypes.SessionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Session indicates an expected call of Session.
func (mr *MockOIDCAzureSessionStorageMockRecorder) Session(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockOIDCAzureSessionStorage)(nil).Session), ctx, sessionID)
}

// UpdateSessionActivity mocks base method.
func (m *MockOIDCAzureSessionStorage) UpdateSessionActivity(ctx context.Context, sessionID ccc.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSessionActivity", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSessionActivity indicates an expected call of UpdateSessionActivity.
func (mr *MockOIDCAzureSessionStorageMockRecorder) UpdateSessionActivity(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSessionActivity", reflect.TypeOf((*MockOIDCAzureSessionStorage)(nil).UpdateSessionActivity), ctx, sessionID)
}
