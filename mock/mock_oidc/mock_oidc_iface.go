// Code generated by MockGen. DO NOT EDIT.
// Source: ../oidc/oidc_iface.go
//
// Generated by this command:
//
//	mockgen -source ../oidc/oidc_iface.go -destination mock_oidc/mock_oidc_iface.go
//

// Package mock_oidc is a generated GoMock package.
package mock_oidc

import (
	context "context"
	http "net/http"
	reflect "reflect"

	oidc "github.com/coreos/go-oidc/v3/oidc"
	gomock "go.uber.org/mock/gomock"
	oauth2 "golang.org/x/oauth2"
)

// MockAuthenticator is a mock of Authenticator interface.
type MockAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorMockRecorder
	isgomock struct{}
}

// MockAuthenticatorMockRecorder is the mock recorder for MockAuthenticator.
type MockAuthenticatorMockRecorder struct {
	mock *MockAuthenticator
}

// NewMockAuthenticator creates a new mock instance.
func NewMockAuthenticator(ctrl *gomock.Controller) *MockAuthenticator {
	mock := &MockAuthenticator{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticator) EXPECT() *MockAuthenticatorMockRecorder {
	return m.recorder
}

// AuthCodeURL mocks base method.
func (m *MockAuthenticator) AuthCodeURL(ctx context.Context, w http.ResponseWriter, returnURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthCodeURL", ctx, w, returnURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthCodeURL indicates an expected call of AuthCodeURL.
func (mr *MockAuthenticatorMockRecorder) AuthCodeURL(ctx, w, returnURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthCodeURL", reflect.TypeOf((*MockAuthenticator)(nil).AuthCodeURL), ctx, w, returnURL)
}

// LoginURL mocks base method.
func (m *MockAuthenticator) LoginURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// LoginURL indicates an expected call of LoginURL.
func (mr *MockAuthenticatorMockRecorder) LoginURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginURL", reflect.TypeOf((*MockAuthenticator)(nil).LoginURL))
}

// Verify mocks base method.
func (m *MockAuthenticator) Verify(ctx context.Context, w http.ResponseWriter, r *http.Request, claims any) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx, w, r, claims)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Verify indicates an expected call of Verify.
func (mr *MockAuthenticatorMockRecorder) Verify(ctx, w, r, claims any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockAuthenticator)(nil).Verify), ctx, w, r, claims)
}

// MockoidcProvider is a mock of oidcProvider interface.
type MockoidcProvider struct {
	ctrl     *gomock.Controller
	recorder *MockoidcProviderMockRecorder
	isgomock struct{}
}

// MockoidcProviderMockRecorder is the mock recorder for MockoidcProvider.
type MockoidcProviderMockRecorder struct {
	mock *MockoidcProvider
}

// NewMockoidcProvider creates a new mock instance.
func NewMockoidcProvider(ctrl *gomock.Controller) *MockoidcProvider {
	mock := &MockoidcProvider{ctrl: ctrl}
	mock.recorder = &MockoidcProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockoidcProvider) EXPECT() *MockoidcProviderMockRecorder {
	return m.recorder
}

// AuthCodeURL mocks base method.
func (m *MockoidcProvider) AuthCodeURL(state string, opts ...oauth2.AuthCodeOption) string {
	m.ctrl.T.Helper()
	varargs := []any{state}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthCodeURL", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// AuthCodeURL indicates an expected call of AuthCodeURL.
func (mr *MockoidcProviderMockRecorder) AuthCodeURL(state any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{state}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthCodeURL", reflect.TypeOf((*MockoidcProvider)(nil).AuthCodeURL), varargs...)
}

// Exchange mocks base method.
func (m *MockoidcProvider) Exchange(ctx context.Context, code string, opts ...oauth2.AuthCodeOption) (*oauth2.Token, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, code}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exchange", varargs...)
	ret0, _ := ret[0].(*oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exchange indicates an expected call of Exchange.
func (mr *MockoidcProviderMockRecorder) Exchange(ctx, code any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, code}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exchange", reflect.TypeOf((*MockoidcProvider)(nil).Exchange), varargs...)
}

// Verifier mocks base method.
func (m *MockoidcProvider) Verifier() *oidc.IDTokenVerifier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verifier")
	ret0, _ := ret[0].(*oidc.IDTokenVerifier)
	return ret0
}

// Verifier indicates an expected call of Verifier.
func (mr *MockoidcProviderMockRecorder) Verifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verifier", reflect.TypeOf((*MockoidcProvider)(nil).Verifier))
}
