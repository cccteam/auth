// Code generated by MockGen. DO NOT EDIT.
// Source: ../oidc/loader/loader_iface.go
//
// Generated by this command:
//
//	mockgen -source ../oidc/loader/loader_iface.go -destination mock_loader/mock_loader_iface.go
//

// Package mock_loader is a generated GoMock package.
package mock_loader

import (
	context "context"
	reflect "reflect"

	loader "github.com/cccteam/session/oidc/loader"
	oidc "github.com/coreos/go-oidc/v3/oidc"
	gomock "go.uber.org/mock/gomock"
	oauth2 "golang.org/x/oauth2"
)

// MockLoader is a mock of Loader interface.
type MockLoader struct {
	ctrl     *gomock.Controller
	recorder *MockLoaderMockRecorder
	isgomock struct{}
}

// MockLoaderMockRecorder is the mock recorder for MockLoader.
type MockLoaderMockRecorder struct {
	mock *MockLoader
}

// NewMockLoader creates a new mock instance.
func NewMockLoader(ctrl *gomock.Controller) *MockLoader {
	mock := &MockLoader{ctrl: ctrl}
	mock.recorder = &MockLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoader) EXPECT() *MockLoaderMockRecorder {
	return m.recorder
}

// LoginURL mocks base method.
func (m *MockLoader) LoginURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// LoginURL indicates an expected call of LoginURL.
func (mr *MockLoaderMockRecorder) LoginURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginURL", reflect.TypeOf((*MockLoader)(nil).LoginURL))
}

// Provider mocks base method.
func (m *MockLoader) Provider(ctx context.Context) (loader.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provider", ctx)
	ret0, _ := ret[0].(loader.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Provider indicates an expected call of Provider.
func (mr *MockLoaderMockRecorder) Provider(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provider", reflect.TypeOf((*MockLoader)(nil).Provider), ctx)
}

// SetLoginURL mocks base method.
func (m *MockLoader) SetLoginURL(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLoginURL", arg0)
}

// SetLoginURL indicates an expected call of SetLoginURL.
func (mr *MockLoaderMockRecorder) SetLoginURL(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLoginURL", reflect.TypeOf((*MockLoader)(nil).SetLoginURL), arg0)
}

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
	isgomock struct{}
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// AuthCodeURL mocks base method.
func (m *MockProvider) AuthCodeURL(state string, opts ...oauth2.AuthCodeOption) string {
	m.ctrl.T.Helper()
	varargs := []any{state}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthCodeURL", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// AuthCodeURL indicates an expected call of AuthCodeURL.
func (mr *MockProviderMockRecorder) AuthCodeURL(state any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{state}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthCodeURL", reflect.TypeOf((*MockProvider)(nil).AuthCodeURL), varargs...)
}

// Exchange mocks base method.
func (m *MockProvider) Exchange(ctx context.Context, code string, opts ...oauth2.AuthCodeOption) (*oauth2.Token, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, code}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exchange", varargs...)
	ret0, _ := ret[0].(*oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exchange indicates an expected call of Exchange.
func (mr *MockProviderMockRecorder) Exchange(ctx, code any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, code}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exchange", reflect.TypeOf((*MockProvider)(nil).Exchange), varargs...)
}

// Verify mocks base method.
func (m *MockProvider) Verify(ctx context.Context, rawIDToken string) (*oidc.IDToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx, rawIDToken)
	ret0, _ := ret[0].(*oidc.IDToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockProviderMockRecorder) Verify(ctx, rawIDToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockProvider)(nil).Verify), ctx, rawIDToken)
}
